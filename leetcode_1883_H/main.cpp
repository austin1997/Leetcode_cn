#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
#include <limits>
#include <deque>
#include <queue>
#include <unordered_set>
#include <unordered_map>
#include <map>
#include <set>

using namespace std;
/*
 * @lc app=leetcode.cn id=1883 lang=cpp
 *
 * [1883] 准时抵达会议现场的最小跳过休息次数
 */

// @lc code=start
class Solution {
public:
    int minSkips(vector<int>& dist, int speed, int hoursBefore) {
        int n = dist.size();
        vector<vector<uint64_t>> distSum(n, vector<uint64_t>(n, numeric_limits<uint64_t>::max()));
        distSum[0][0] = dist[0];
        for (int i = 1; i < n; i++) {
            distSum[i][0] = ((distSum[i - 1][0] + speed - 1) / speed) * speed + dist[i];
        }
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < i; j++) {
                // skip
                distSum[i][j] = distSum[i - 1][j - 1] + dist[i];
                // no skip
                distSum[i][j] = std::min(((distSum[i - 1][j] + speed - 1) / speed) * speed + dist[i], distSum[i][j]);
            }
            distSum[i][i] = distSum[i - 1][i - 1] + dist[i];
        }
        uint64_t maxDistance = speed * hoursBefore;
        int result = -1;
        for (int j = 0; j < n; j++) {
            if (distSum[n - 1][j] <= maxDistance) {
                return j;
            }
        }
        return result;
    }
};
// @lc code=end

int main(int argc, char const *argv[])
{
    Solution sol;
    // std::vector<int> dist = {1, 3, 2};
    // std::cout << sol.minSkips(dist, 4, 2) << std::endl;
    // std::vector<int> dist = {7,3,5,5};
    // std::cout << sol.minSkips(dist, 2, 10) << std::endl;
    // std::cout << sol.minSkips(dist, 1, 10) << std::endl;
    // std::vector<int> dist = {18,66,64,12,97,7,15,20,81,21,88,55,77,9,50,49,77,60,68,33,71,2,88,93,15,88,69,97,35,99,83,44,15,38,56,21,59,1,93,93,34,65,98,23,65,14,81,39,82,65,78,26,20,48,98,21,70,100,68,1,77,42,63,3};
    // std::cout << sol.minSkips(dist, 17, 160) << std::endl;
    // std::vector<int> dist = {40,31,8,31,73,11,11,94,63,9,98,69,99,17,17,85,61,71,22,34,68,78,55,28,70,97,94,89,26,92,40,52,86,84,48,57,67,58,16,32,29,9,44,3,76,71,30,76,29,1,10,91,81,8,30,9,5,43,10,66,31,36,86,63,28,70,17,93,74,74,61,32,61};
    // std::cout << sol.minSkips(dist, 55, 96) << std::endl;
    std::vector<int> dist = {};
    std::cout << sol.minSkips(dist, 1, 10000000) << std::endl;
    return 0;
}
